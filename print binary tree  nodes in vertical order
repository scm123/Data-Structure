  static ArrayList <Integer> verticalOrder(Node root)
    {
        // add your code here
        ArrayList <Integer> al=new ArrayList <Integer> ();
        if(root==null) return al;
        
        class Pair  {
            
            Node node;
            int hd;
            Pair(Node node,int hd){
                this.node=node;
                this.hd=hd;
            }
        }
        
        Queue<Pair> q=new LinkedList<>();
        Map<Integer,ArrayList<Integer> > map=new TreeMap<>();
        
        q.add(new Pair(root,0));
        while(!q.isEmpty()){
            int n=q.size();
            for(int i=0 ; i<n ; i++) {
               Pair p= q.poll();
               if(!map.containsKey(p.hd))
                {
                   ArrayList<Integer> aa= new ArrayList<Integer>();
                   aa.add(p.node.data);
                   map.put(p.hd,aa);
                }
               else
               {
                  ArrayList<Integer> aa= map.get(p.hd);
                  aa.add(p.node.data);
                  map.put(p.hd,aa);
               }
              
               if(p.node.left!=null) 
                q.add(new Pair(p.node.left,p.hd-1));
               if(p.node.right!=null) 
                q.add(new Pair(p.node.right,p.hd+1));    
            }
        }
        
        for(Map.Entry<Integer,ArrayList <Integer>> entry : map.entrySet()){
            al.addAll(entry.getValue());
        }
        map.clear();
        return al;
    }
