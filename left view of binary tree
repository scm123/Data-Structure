##1. iterative leftView  , Time : O(n) Space : O(n) 

 ArrayList<Integer> leftView(Node root)
    {
      // Your code here

      Queue<Node> q =new LinkedList<>();
      ArrayList<Integer> al=new ArrayList<>();
      if(root==null) return al;
      q.add(root);
      while(!q.isEmpty()){
          
         int tot_nodes=q.size();
         
         for(int i = 1; i <= tot_nodes; i++)  {  
             Node node=q.poll();
             if(i==1) al.add(node.data);
             if(node.left!=null) q.add(node.left);
             if(node.right!=null) q.add(node.right);
         }
      }
      return al;
    }
   
   
   ##2. recursive leftView  , Time : O(n) Aux. Space : O(n) 
   
class Tree
{
   
     int max=0;
    //Function to return list containing elements of left view of binary tree.
    public void dfs(ArrayList<Integer> al,Node root,int level){
        if(root==null) return;
        if(max<level)
          {
              al.add(root.data);
              max=level;
          }      
        dfs(al,root.left,level+1);
        dfs(al,root.right,level+1);
    }
    
    
    ArrayList<Integer> leftView(Node root)
    {
      // Your code here
        //max=0;
        ArrayList<Integer> al=new ArrayList<>();
        dfs(al,root,1);


      return al;
    }
    
  }  
