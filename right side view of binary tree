
##1. recursive

class Solution {
    int max=0;
    
    public void dfs(List<Integer> al,TreeNode root,int level ){
        if(root==null) return;
        if(max<level){
            al.add(root.val);
            max=level;
        }
        dfs(al,root.right,level+1);
        dfs(al,root.left,level+1);
    }
    
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> al=new ArrayList<>();
        if(root==null) return al;
        dfs(al,root,1);
      
        return al;
    }
}



##2.  iterative

class Solution {
   
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> al=new ArrayList<>();
        if(root==null) return al;
   
      Queue<TreeNode> q =new LinkedList<>();
      q.add(root);
      while(!q.isEmpty()){
          
         int tot_nodes=q.size();
         
         for(int i = 1; i <= tot_nodes; i++)  {  
             TreeNode node=q.poll();
             if(i==tot_nodes) al.add(node.val);
             if(node.left!=null) q.add(node.left);
             if(node.right!=null) q.add(node.right);
         }
      }
  
        return al;
    }
}
